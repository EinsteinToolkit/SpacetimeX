# Schedule definitions for thorn Z4co

STORAGE: chi
STORAGE: gamma_tilde
STORAGE: K_hat
STORAGE: A_tilde
STORAGE: Gam_tilde
STORAGE: Theta
STORAGE: alphaG
STORAGE: betaG

STORAGE: ZtC
STORAGE: HC
STORAGE: MtC
STORAGE: allC

STORAGE: chi_rhs
STORAGE: gamma_tilde_rhs
STORAGE: K_hat_rhs
STORAGE: A_tilde_rhs
STORAGE: Gam_tilde_rhs
STORAGE: Theta_rhs
STORAGE: alphaG_rhs
STORAGE: betaG_rhs

if(use_subcycling_wip) {
  STORAGE: chi_old
  STORAGE: gamma_tilde_old
  STORAGE: K_hat_old
  STORAGE: A_tilde_old
  STORAGE: Gam_tilde_old
  STORAGE: Theta_old
  STORAGE: alphaG_old
  STORAGE: betaG_old

  STORAGE: chi_k1
  STORAGE: gamma_tilde_k1
  STORAGE: K_hat_k1
  STORAGE: A_tilde_k1
  STORAGE: Gam_tilde_k1
  STORAGE: Theta_k1
  STORAGE: alphaG_k1
  STORAGE: betaG_k1

  STORAGE: chi_k2
  STORAGE: gamma_tilde_k2
  STORAGE: K_hat_k2
  STORAGE: A_tilde_k2
  STORAGE: Gam_tilde_k2
  STORAGE: Theta_k2
  STORAGE: alphaG_k2
  STORAGE: betaG_k2

  STORAGE: chi_k3
  STORAGE: gamma_tilde_k3
  STORAGE: K_hat_k3
  STORAGE: A_tilde_k3
  STORAGE: Gam_tilde_k3
  STORAGE: Theta_k3
  STORAGE: alphaG_k3
  STORAGE: betaG_k3

  STORAGE: chi_k4
  STORAGE: gamma_tilde_k4
  STORAGE: K_hat_k4
  STORAGE: A_tilde_k4
  STORAGE: Gam_tilde_k4
  STORAGE: Theta_k4
  STORAGE: alphaG_k4
  STORAGE: betaG_k4
}




################################################################################
# We have 4 schedule groups:
# 1. initial: set up core Z4c variables from ADM variables
# 2. poststep: post-process core Z4c variables and calculate other variables
# 3. analysis: calculate constraints etc.
# 4. rhs: calculate RHS of Z4c variables

SCHEDULE GROUP Z4co_InitialGroup AT initial AFTER ADMBaseX_PostInitial
{
} "Convert ADM to Z4c variables"

SCHEDULE GROUP Z4co_PostStepGroup AT initial AFTER Z4co_InitialGroup BEFORE ADMBaseX_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4co_PostStepGroup2 AT initial AFTER (TmunuBaseX_SetTmunuVars, Z4co_PostStepGroup) BEFORE ADMBaseX_SetADMRHS
{
} "Post-process Z4c variables, part 2"

SCHEDULE GROUP Z4co_PostStepGroup AT postregrid BEFORE ADMBaseX_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4co_PostStepGroup2 AT postregrid AFTER (TmunuBaseX_SetTmunuVars, Z4co_PostStepGroup) BEFORE ADMBaseX_SetADMRHS
{
} "Post-process Z4c variables, part 2"

SCHEDULE GROUP Z4co_PostStepGroup IN ODESolvers_PostStep BEFORE ADMBaseX_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4co_PostStepGroup2 IN ODESolvers_PostStep AFTER (TmunuBaseX_SetTmunuVars, Z4co_PostStepGroup) BEFORE ADMBaseX_SetADMRHS
{
} "Post-process Z4c variables, part 2"

SCHEDULE GROUP Z4co_AnalysisGroup AT analysis
{
} "Analyse Z4c variables"

SCHEDULE GROUP Z4co_RHSGroup IN ODESolvers_RHS
{
} "Calculate Z4c RHS"

################################################################################


SCHEDULE Z4co_Initial1 IN Z4co_InitialGroup
{
  LANG: C
  READS: ADMBaseX::metric(interior)
  READS: ADMBaseX::curv(interior)
  READS: ADMBaseX::lapse(interior)
  READS: ADMBaseX::shift(interior)
  WRITES: chi(interior)
  WRITES: gamma_tilde(interior)
  WRITES: K_hat(interior)
  WRITES: A_tilde(interior)
  WRITES: Theta(interior)
  WRITES: alphaG(interior)
  WRITES: betaG(interior)
  SYNC: gamma_tilde
} "Convert ADM to Z4c variables, part 1"

SCHEDULE Z4co_Initial2 IN Z4co_InitialGroup AFTER Z4co_Initial1
{
  LANG: C
  READS: gamma_tilde(everywhere)
  WRITES: Gam_tilde(interior)
} "Convert ADM to Z4c variables, part 2"

SCHEDULE Z4co_Enforce IN Z4co_PostStepGroup
{
  LANG: C
  READS: chi(interior)
  READS: gamma_tilde(interior)
  READS: A_tilde(interior)
  READS: alphaG(interior)
  WRITES: chi(interior)
  WRITES: gamma_tilde(interior)
  WRITES: A_tilde(interior)
  WRITES: alphaG(interior)
  SYNC: chi
  SYNC: gamma_tilde
  SYNC: K_hat
  SYNC: A_tilde
  SYNC: Gam_tilde
  SYNC: Theta
  SYNC: alphaG
  SYNC: betaG
} "Enforce algebraic Z4c constraints"

if (calc_ADM_vars) {
  SCHEDULE Z4co_ADM IN Z4co_PostStepGroup AFTER Z4co_Enforce
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    #READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    WRITES: ADMBaseX::metric(everywhere)
    WRITES: ADMBaseX::curv(everywhere)
    WRITES: ADMBaseX::lapse(everywhere)
    WRITES: ADMBaseX::shift(everywhere)
    #WRITES: ADMBaseX::dtlapse(everywhere)
    #WRITES: ADMBaseX::dtshift(everywhere)
  } "Convert Z4c to ADM variables"
}

if (calc_constraints) {
  SCHEDULE Z4co_Constraints IN Z4co_AnalysisGroup
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: TmunuBaseX::eTtt(interior)
    READS: TmunuBaseX::eTti(interior)
    READS: TmunuBaseX::eTij(interior)
    WRITES: ZtC(interior)
    WRITES: HC(interior)
    WRITES: MtC(interior)
    #WRITES: allC(interior)
  } "Calculate Z4c Constraints"
}

SCHEDULE Z4co_RHS IN Z4co_RHSGroup
{
  LANG: C
  READS: chi(everywhere)
  READS: gamma_tilde(everywhere)
  READS: K_hat(everywhere)
  READS: A_tilde(everywhere)
  READS: Gam_tilde(everywhere)
  READS: Theta(everywhere)
  READS: alphaG(everywhere)
  READS: betaG(everywhere)
  READS: TmunuBaseX::eTtt(interior)
  READS: TmunuBaseX::eTti(interior)
  READS: TmunuBaseX::eTij(interior)
  WRITES: chi_rhs(interior)
  WRITES: gamma_tilde_rhs(interior)
  WRITES: K_hat_rhs(interior)
  WRITES: A_tilde_rhs(interior)
  WRITES: Gam_tilde_rhs(interior)
  WRITES: Theta_rhs(interior)
  WRITES: alphaG_rhs(interior)
  WRITES: betaG_rhs(interior)
} "Calculate Z4c RHS"

if (CCTK_Equals(boundary_conditions, "NewRadX")) {
  SCHEDULE Z4co_Apply_NewRadX_BC IN Z4co_RHSGroup AFTER Z4c_RHS
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: chi_rhs(interior)
    READS: gamma_tilde_rhs(interior)
    READS: K_hat_rhs(interior)
    READS: A_tilde_rhs(interior)
    READS: Gam_tilde_rhs(interior)
    READS: Theta_rhs(interior)
    READS: alphaG_rhs(interior)
    READS: betaG_rhs(interior)
    WRITES: chi_rhs(interior)
    WRITES: gamma_tilde_rhs(interior)
    WRITES: K_hat_rhs(interior)
    WRITES: A_tilde_rhs(interior)
    WRITES: Gam_tilde_rhs(interior)
    WRITES: Theta_rhs(interior)
    WRITES: alphaG_rhs(interior)
    WRITES: betaG_rhs(interior)
  } "Apply radiative boundary conditions to Z4c RHS variables using NewRadX"
}
