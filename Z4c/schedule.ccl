# Schedule definitions for thorn Z4c

STORAGE: chi
STORAGE: gamma_tilde
STORAGE: K_hat
STORAGE: A_tilde
STORAGE: Gam_tilde
STORAGE: Theta
STORAGE: alphaG
STORAGE: betaG

STORAGE: ZtC
STORAGE: HC
STORAGE: MtC
STORAGE: allC

STORAGE: chi_rhs
STORAGE: gamma_tilde_rhs
STORAGE: K_hat_rhs
STORAGE: A_tilde_rhs
STORAGE: Gam_tilde_rhs
STORAGE: Theta_rhs
STORAGE: alphaG_rhs
STORAGE: betaG_rhs

STORAGE: chi_pre
STORAGE: gamma_tilde_pre
STORAGE: K_hat_pre
STORAGE: A_tilde_pre
STORAGE: Gam_tilde_pre
STORAGE: Theta_pre
STORAGE: alphaG_pre
STORAGE: betaG_pre



################################################################################



SCHEDULE GROUP Z4c_InitialGroup AT initial AFTER ADMBaseX_PostInitial
{
} "Convert ADM to Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup AT initial AFTER Z4c_InitialGroup BEFORE ADMBaseX_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup2 AT initial AFTER (TmunuBaseX_SetTmunuVars, Z4c_PostStepGroup) BEFORE ADMBaseX_SetADMRHS
{
} "Post-process Z4c variables, part 2"



SCHEDULE GROUP Z4c_PostStepGroup AT postregrid BEFORE ADMBaseX_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup2 AT postregrid AFTER (TmunuBaseX_SetTmunuVars, Z4c_PostStepGroup) BEFORE ADMBaseX_SetADMRHS
{
} "Post-process Z4c variables, part 2"



SCHEDULE GROUP Z4c_AnalysisGroup AT analysis
{
} "Analyse Z4c variables"



SCHEDULE GROUP Z4c_PostStepGroup IN ODESolvers_PostStep BEFORE ADMBaseX_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup2 IN ODESolvers_PostStep AFTER (TmunuBaseX_SetTmunuVars, Z4c_PostStepGroup) BEFORE ADMBaseX_SetADMRHS
{
} "Post-process Z4c variables, part 2"

SCHEDULE GROUP Z4c_RHSGroup IN ODESolvers_RHS
{
} "Calculate Z4c RHS"



################################################################################



SCHEDULE Z4c_Test AT wragh
{
  LANG: C
  OPTIONS: meta
} "Self-test"



# We have 4 schedule groups:
# 1. initial: set up core Z4c variables from ADM variables
# 2. poststep: post-process core Z4c variables and calculate other variables
# 3. analysis: calculate constraints etc.
# 4. rhs: calculate RHS of Z4c variables



SCHEDULE Z4c_Initial1 IN Z4c_InitialGroup
{
  LANG: C
  READS: ADMBaseX::metric(interior)
  READS: ADMBaseX::curv(interior)
  READS: ADMBaseX::lapse(interior)
  READS: ADMBaseX::shift(interior)
  WRITES: chi(interior)
  WRITES: gamma_tilde(interior)
  WRITES: K_hat(interior)
  WRITES: A_tilde(interior)
  WRITES: Theta(interior)
  WRITES: alphaG(interior)
  WRITES: betaG(interior)
  # SYNC: chi
  SYNC: gamma_tilde
  # SYNC: K_hat
  # SYNC: A_tilde
  # SYNC: Theta
  # SYNC: alphaG
  # SYNC: betaG
} "Convert ADM to Z4c variables, part 1"

SCHEDULE Z4c_Initial2 IN Z4c_InitialGroup AFTER Z4c_Initial1
{
  LANG: C
  READS: gamma_tilde(everywhere)
  WRITES: Gam_tilde(interior)
  # SYNC: Gam_tilde
} "Convert ADM to Z4c variables, part 2"

SCHEDULE Z4c_Initial3 IN Z4c_InitialGroup AFTER Z4c_Initial2
{
  LANG: C
  WRITES: chi_pre(everywhere)
  WRITES: gamma_tilde_pre(everywhere)
  WRITES: K_hat_pre(everywhere)
  WRITES: A_tilde_pre(everywhere)
  WRITES: Gam_tilde_pre(everywhere)
  WRITES: Theta_pre(everywhere)
  WRITES: alphaG_pre(everywhere)
  WRITES: betaG_pre(everywhere)
} "Convert ADM to Z4c variables, part 3"



SCHEDULE Z4c_Enforce IN Z4c_PostStepGroup
{
  LANG: C
  READS: chi(interior)
  READS: gamma_tilde(interior)
  READS: A_tilde(interior)
  READS: alphaG(interior)
  WRITES: chi(interior)
  WRITES: gamma_tilde(interior)
  WRITES: A_tilde(interior)
  WRITES: alphaG(interior)
  SYNC: chi
  SYNC: gamma_tilde
  SYNC: K_hat
  SYNC: A_tilde
  SYNC: Gam_tilde
  SYNC: Theta
  SYNC: alphaG
  SYNC: betaG
  SYNC: chi_pre
  SYNC: gamma_tilde_pre
  SYNC: K_hat_pre
  SYNC: A_tilde_pre
  SYNC: Gam_tilde_pre
  SYNC: Theta_pre
  SYNC: alphaG_pre
  SYNC: betaG_pre
} "Enforce algebraic Z4c constraints"

if (calc_ADM_vars) {
  SCHEDULE Z4c_ADM IN Z4c_PostStepGroup AFTER Z4c_Enforce
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    # READS: TmunuBaseX::eTtt(interior)
    # READS: TmunuBaseX::eTti(interior)
    # READS: TmunuBaseX::eTij(interior)
    WRITES: ADMBaseX::metric(everywhere)
    WRITES: ADMBaseX::curv(everywhere)
    WRITES: ADMBaseX::lapse(everywhere)
    WRITES: ADMBaseX::dtlapse(everywhere)
    WRITES: ADMBaseX::shift(everywhere)
    WRITES: ADMBaseX::dtshift(everywhere)
  } "Convert Z4c to ADM variables"
}

if (calc_ADMRHS_vars) {
  SCHEDULE Z4c_ADM2 IN Z4c_PostStepGroup2
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: TmunuBaseX::eTtt(interior)
    READS: TmunuBaseX::eTti(interior)
    READS: TmunuBaseX::eTij(interior)
    WRITES: ADMBaseX::dtcurv(interior)
    WRITES: ADMBaseX::dt2lapse(interior)
    WRITES: ADMBaseX::dt2shift(interior)
    SYNC: ADMBaseX::dtcurv
    SYNC: ADMBaseX::dt2lapse
    SYNC: ADMBaseX::dt2shift
  } "Calculate second time derivatives of ADM variables"
}



if (calc_constraints) {
  SCHEDULE Z4c_Constraints IN Z4c_AnalysisGroup
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: TmunuBaseX::eTtt(interior)
    READS: TmunuBaseX::eTti(interior)
    READS: TmunuBaseX::eTij(interior)
    WRITES: ZtC(interior)
    WRITES: HC(interior)
    WRITES: MtC(interior)
    WRITES: allC(interior)
    # SYNC: ZtC
    # SYNC: HC
    # SYNC: MtC
    # SYNC: allC
  } "Calculate Z4c constraints"
}



SCHEDULE Z4c_RHS IN Z4c_RHSGroup
{
  LANG: C
  READS: chi(everywhere)
  READS: gamma_tilde(everywhere)
  READS: K_hat(everywhere)
  READS: A_tilde(everywhere)
  READS: Gam_tilde(everywhere)
  READS: Theta(everywhere)
  READS: alphaG(everywhere)
  READS: betaG(everywhere)
  READS: TmunuBaseX::eTtt(interior)
  READS: TmunuBaseX::eTti(interior)
  READS: TmunuBaseX::eTij(interior)
  WRITES: chi_rhs(interior)
  WRITES: gamma_tilde_rhs(interior)
  WRITES: K_hat_rhs(interior)
  WRITES: A_tilde_rhs(interior)
  WRITES: Gam_tilde_rhs(interior)
  WRITES: Theta_rhs(interior)
  WRITES: alphaG_rhs(interior)
  WRITES: betaG_rhs(interior)
} "Calculate Z4c RHS"

if (CCTK_Equals(boundary_conditions, "NewRadX")) {
  SCHEDULE Z4c_apply_newradx_boundary_conditions IN Z4c_RHSGroup AFTER Z4c_RHS
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: chi_rhs(interior)
    READS: gamma_tilde_rhs(interior)
    READS: K_hat_rhs(interior)
    READS: A_tilde_rhs(interior)
    READS: Gam_tilde_rhs(interior)
    READS: Theta_rhs(interior)
    READS: alphaG_rhs(interior)
    READS: betaG_rhs(interior)
    WRITES: chi_rhs(interior)
    WRITES: gamma_tilde_rhs(interior)
    WRITES: K_hat_rhs(interior)
    WRITES: A_tilde_rhs(interior)
    WRITES: Gam_tilde_rhs(interior)
    WRITES: Theta_rhs(interior)
    WRITES: alphaG_rhs(interior)
    WRITES: betaG_rhs(interior)
  } "Apply radiative boundary conditions to Z4c RHS variables using NewRadX"
}
